import matplotlib.pyplot as plt
import numpy as np

# Данные
x = np.array([-2, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0, 
              -0.9, -0.8, -0.7, -0.6, -0.5, -0.4, -0.3, -0.2, -0.1, 
              0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 
              1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2.0])

fx = np.array([-0.15723710, -0.01503952, -0.00068203, -0.00000587, 0, -4e-8, 
               -0.00004323, -0.00189978, -0.02995863, -0.30906858, -2.73560392, 
               -26.38812633, -963.20913610, 722.83120618, 1441.71989868, 
               4203.82122134, 15186.30113430, 58782.21335246, -825647.73273606, 
               -1018378462.74119311, 
               2.23163690, 2.23163689, 2.23163690, 2.23163696, 2.23163691, 
               2.23163694, 2.23163687, 2.23163686, 2.23163655, 
               2.23163693, 2.23163698, 2.23163708, 2.23163701, 2.23163697, 
               2.23163689, 2.23163686, 2.23163681, 2.23163685, 2.23163693])

# Создаем график
plt.figure(figsize=(12, 6))

# График для всех точек
plt.plot(x, fx, 'bo-', label='f(x)', markersize=4)

# Настройки графика
plt.title('График функции f(x)')
plt.xlabel('x')
plt.ylabel('f(x)')
plt.grid(True)

# Увеличиваем количество делений на оси x для лучшей читаемости
plt.xticks(np.arange(-2, 2.1, 0.2))

# Для лучшего отображения больших значений можно использовать логарифмическую шкалу
# Но в данном случае это может скрыть особенности поведения функции
# plt.yscale('symlog')  # Раскомментируйте, если нужно

plt.legend()
plt.show()